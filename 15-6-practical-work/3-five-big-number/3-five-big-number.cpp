#include <iostream>
#include <vector>

int inputNumber = 0;

// Функция сортировки вставкой
void insertionSort(std::vector<int> &array, int size) {
	for (int i = 1; i < size; i++) {
        int j = i;
        while (j > 0 && array[j - 1] > array[j]) {
            std::swap(array[j - 1], array[j]);
            j--;
        } 
    }
}

int main() {
	std::cout << "Input number: ";
	std::vector<int> arr {inputNumber}; 
	
	// пока не ввели -2 выполняем цикл
    while (inputNumber != -2) {
		std::cin >> inputNumber;
		
		// если в векторе ровно 5 элементов
		if (arr.size() == 5){
			//при вводе -1 выводим 5й по возрастанию элемент
			if (inputNumber == -1) std::cout << arr[5] << std::endl;
			//если вводимое значение меньше 5-го по возрастанию
			else if (inputNumber < arr[5]) {
				//добавляем его в конец
				arr.push_back(inputNumber);
				//
				arr.erase(arr.end());
				//сортируем вектор
				insertionSort (arr, arr.size());
			}
		}
		else arr.push_back(inputNumber);
    }
    
	std::cout << "Final!" << std::endl;
	return 0;
}

/*
Что нужно сделать
С клавиатуры вводятся числа. Когда пользователь вводит «−1», необходимо выводить на экран
пятое по возрастанию число среди введённых. Когда пользователь вводит «−2», 
программа завершает работу.
Пример
Ввод: 7 5 3 1 2 4 6 −1
Вывод: 5 (в отсортированном виде введённые числа выглядят так: {1, 2, 3, 4, 5, 6, 7})
Ввод: 1 1 1 −1
Вывод: 2 (в отсортированном виде введённые числа выглядят так: {1, 1, 1, 1, 2, 3, 4, 5, 6, 7})
Ввод: −2
Завершение программы
Важная часть задания — оптимальное использование ресурсов. Для решения этой задачи 
достаточно хранить в векторе только пять наименьших элементов.
Например, если мы храним массив [1,3,5,7,9] и вводим число 15 — его можно отбросить, 
так как оно уже никогда не будет пятым в ряду введённых чисел. А если вводится число 8, 
массив должен поменяться на [1,3,5,7,8], и теперь всё, что больше 8, можно игнорировать.
Рекомендация
Удостоверьтесь, что требуемое число можно вывести (может быть меньше пяти чисел).
*/  