#include <iostream>
#include <vector>
#include <cctype>

int main()
{
    std::vector<int> db(20);
    // создаем вектор на 20 элементов
    int number = 0;
    while (true) {
        std::cout << "input number: ";
        std::cin >> number;
        // получаем значение
        if (std::cin.fail()) 
        {
            // проверка на число
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Input not number!" << std::endl;
        }
        
        else if (number == -1) {
            // при вводе - 1 выводми содержимое вектора
            std::cout << "output: ";
            for (int i = 0; i < db.size(); i++)
                std::cout << " " << db[i];
            std::cout << std::endl;
        }
        
        else
        {
            for (int i = 0; i < db.size() - 1; i++)
                std::swap(db[i], db[i + 1]);
                // меняем местами элемент в позиции i и следующий за ним
            db[db.size() - 1] = number;
            // добавляем в конец вектора значение number
        }
    }
}

/*
Вам дали задание разработать хранилище для целочисленных значений во встраиваемой операционной системе. 
Такие системы работают в большей части техники, которая нас окружает: 
автомобилях, стиральных машинах, микроволновках, холодильниках. 
Только вот незадача: объём памяти этой системы очень небольшой, 
поэтому в хранилище не может находиться более 20 элементов.

В хранилище, являющееся вектором, с клавиатуры приходят целочисленные 
значения и помещаются один за другим.

При вводе −1 с клавиатуры необходимо вывести всё содержимое хранилища 
(допускается вывести все 20 элементов, даже если введено меньше). 
При выводе элементы должны быть в том порядке, в котором они добавлялись.

Попробуйте написать максимально оптимизированное решение этой задачи, 
чтобы совершалось как можно меньше расширений и перемещений элементов внутри вектора.

Чтобы задать размера вектора равным 20, используйте:

std::vector<int> db(20);

//                   ^ Задаём размер вектора при создании
Пример выполнения:
input number: 1
input number: 2
input number: 3
…
input number: 19
input number: 20
input number: -1
output: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
input number: 21
input number: 22
input number: 23
input number: -1
output: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23

Рекомендации по выполнению
Посмотрите, как работает кольцевой буфер. Этот алгоритм поможет быстрее найти решение.

Что оценивается
Размер вектора не превышает 20 элементов.
Нет изменений в размере вектора (это выполняется, если вы выбрали верный алгоритм решения).


Критерии оценки
Выполнены все три задания.
Программы запускаются и корректно работают, нет синтаксических ошибок.
Имена переменных корректные, отражают суть хранимых данных.
Создан текстовый интерфейс для всех программ.
Для всех задач обеспечен контроль ввода.
В циклах нет выхода за границы векторов.

*/
